package handel

// Handel is the principal struct that performs the large scale multi-signature
// aggregation protocol.
type Handel struct {
	// Config holding parameters to Handel
	c *Config
	// Network enabling external communication with other Handel nodes
	net Network
	// Registry holding access to all Handel node's identities
	reg Registry
	// signature scheme used for this Handel protocol
	scheme SignatureScheme
	// Message that is being signed during the Handel protocol
	msg []byte
	// callback that gets called whenever a valid final multisignature is
	// generated. The BitSet's size is the size of the registry.
	callback func(BitSet, MultiSignature)
}

// NewHandel returns a Handle interface that uses the given network and
// registry. The signature scheme is the one to use for this Handel protocol,
// and the message is the message to multi-sign.The first config in the slice is
// taken if not nil. Otherwise, the default config generated by DefaultConfig()
// is used.
func NewHandel(n Network, r Registry, s SignatureScheme, msg []byte,
	conf ...*Config) *Handel {
	h := &Handel{
		net:    n,
		reg:    r,
		scheme: s,
		msg:    msg,
	}

	if len(conf) > 0 && conf[0] != nil {
		// XXX Replace to method that checks which fields are set, and use
		// defaults value for fields not set.
		h.c = conf[0]
	} else {
		h.c = DefaultConfig(r.Size())
	}
	return h
}

// NewPacket implements the Listener interface for the network.
func (h *Handel) NewPacket(p *Packet) {

}
