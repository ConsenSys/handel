package handel

// Handel is the principal struct that performs the large scale multi-signature
// aggregation protocol.
type Handel struct {
	// Config holding parameters to Handel
	c *Config
	// Network enabling external communication with other Handel nodes
	net Network
	// Registry holding access to all Handel node's identities
	reg Registry
	// callback that gets called whenever a valid final multisignature is
	// generated
	callback func(BitSet, MultiSignature)
}

// NewHandel returns a Handle interface that uses the given network and
// registry. The first config in the slice is taken if not nil. Otherwise,
// the default config generated by DefaultConfig() is used.
func NewHandel(n Network, r Registry, conf ...*Config) *Handel {
	h := &Handel{
		net: n,
		reg: r,
	}

	if len(conf) > 0 && conf[0] != nil {
		h.c = conf[0]
	} else {
		h.c = DefaultConfig(r.Size())
	}
	return h
}

// SetCallback sets the callback that is called whenever a valid final
// multi-signature is generated.
func (h *Handel) SetCallback(fn func(BitSet, MultiSignature)) {
	h.callback = fn
}
